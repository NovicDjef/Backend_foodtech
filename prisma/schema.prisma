generator client {
  provider = "prisma-client-js"
  previewFeatures = ["referentialActions"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Admin {
  id               Int              @id @default(autoincrement())
  username         String
  email            String           @unique
  password         String
  phone            String           @unique
  image            String?
  userRoles        UserRole[]
  restaurants      Restaurant[]
  createdAt        DateTime         @default(now())
  updatedAt        DateTime         @updatedAt
  geolocalisation  Geolocalisation?

  GasVendor GasVendor[]
}

model UserRole {
  admin   Admin @relation(fields: [adminId], references: [id])
  adminId Int
  role    Role  @relation(fields: [roleId], references: [id])
  roleId  Int

  @@id([adminId, roleId])
}

model Role {
  id        Int       @id @default(autoincrement())
  name      String
  userRoles UserRole[]
}

model User {
  id                Int              @id @default(autoincrement())
  username          String
  phone             String           @unique
  image             String?
  password          String 
  avatar            String?
  socialId          String?            
  provider          String?            
  isEmailVerified   Boolean            @default(false)
  pushToken         String?
  commandes         Commande[]
  historiques       Historique[]
  reservations      Reservation[]
  notes             Note[]
  favoritePlats     FavoritePlats[]
  articles          Article[]
  payments          Payement[]
  colis             Colis[]
  livraison         Livraison[]
  otp               OTP?
  geolocalisation   Geolocalisation? @relation(fields: [geolocalisationId], references: [id])
  geolocalisationId Int?
  createdAt         DateTime         @default(now())
  updatedAt         DateTime         @updatedAt
  // ✅ NOUVELLES RELATIONS POUR LE SYSTÈME DE GAZ
  gasOrders           GasOrder[]           @relation("UserGasOrders")
  gasVendorReviews    GasVendorReview[]    @relation("UserGasVendorReviews")
  gasOrderReviews     GasOrderReview[]     @relation("UserGasOrderReviews")
  @@index([socialId, provider])
  NotificationHistory NotificationHistory[]
}

model OTP {
  id              Int      @id @default(autoincrement())
  phone           String
  code            Int?
  verificationSid String
  status          String
  createdAt       DateTime @default(now())
  expiredAt       DateTime @default(dbgenerated("CURRENT_TIMESTAMP + interval '5 minute'"))
  user            User     @relation(fields: [userId], references: [id])
  userId          Int      @unique
}

model Restaurant {
  id              Int               @id @default(autoincrement())
  name            String
  phone           String?
  adresse         String
  image           String
  description     String
  ratings         Float             @default(0)
  latitude        Float
  longitude       Float
  categories      Categorie[]
  complements     Complement[]
  articles        Article[]
  reservations    Reservation[]
  heuresOuverture HeuresOuverture[]
  admin           Admin?            @relation(fields: [adminId], references: [id])
  adminId         Int?
  ville           Ville?            @relation(fields: [villeId], references: [id])
  villeId         Int?
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
}

model HeuresOuverture {
  id           Int         @id @default(autoincrement())
  jour         String
  heures       String
  restaurant   Restaurant? @relation(fields: [restaurantId], references: [id])
  restaurantId Int?

  GasVendor GasVendor[]
}

model Ville {
  id          Int          @id @default(autoincrement())
  name        String
  longitude   Float?
  latitude    Float?
  restaurants Restaurant[]

  GasVendor GasVendor[]
}

model Menu {
  id           Int         @id @default(autoincrement())
  name         String
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt
}

model Categorie {
  id          Int       @id @default(autoincrement())
  name        String
  image       String
  description String?
  plats       Plats[]
  restaurant  Restaurant @relation(fields: [restaurantId], references: [id])
  restaurantId Int  
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model Complement {
  id          Int      @id @default(autoincrement())
  name        String
  price       Float
  plats       Plats[]  @relation("PlatsToComplement")
  restaurant  Restaurant @relation(fields: [restaurantId], references: [id])
  restaurantId Int  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  commandes   CommandeComplement[]
  Menusrapide Menusrapide[] @relation("PlatsToComplement")
}

model CommandeComplement {
  id            Int @id @default(autoincrement())
  quantity      Int
  name         String
  price        Float
  commandeId    Int
  commande      Commande @relation(fields: [commandeId], references: [id])
  complementId  Int
  complement    Complement @relation(fields: [complementId], references: [id])
  
  @@unique([commandeId, complementId])
}

model Plats {
  id            Int             @id @default(autoincrement())
  name          String
  image         String
  description   String?
  prix          Float
  ratings       Float           @default(0)
  articles      Article[]
  notes         Note[]
  commandes     Commande[]
  favoritePlats FavoritePlats[]
  complements   Complement[]   @relation("PlatsToComplement")
  categorie     Categorie?      @relation(fields: [categorieId], references: [id])
  categorieId   Int?
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
}

model Menusrapide {
  id            Int             @id @default(autoincrement())
  name          String
  image         String
  description   String?
  prix          Float
  ratings       Float           @default(0)
  articles      Article[]
  notes         Note[]
  commandes     Commande[]
  favoritePlats FavoritePlats[]
  complements   Complement[]   @relation("PlatsToComplement")
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
}

model Commande {
  id             Int            @id @default(autoincrement())
  quantity       Int
  prix           Float
  recommandation String?
  position       String
  telephone      Int
  status         CommandeStatus @default(EN_ATTENTE)
  user           User?          @relation(fields: [userId], references: [id])
  userId         Int?
  plat           Plats?         @relation(fields: [platsId], references: [id])
  platsId        Int?
  livraison      Livraison[]
  payment        Payement?
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt
  complements    CommandeComplement[]
  Menusrapide    Menusrapide[]
  livreur       Livreur?        @relation(fields: [livreurId], references: [id])
  livreurId     Int?           
}

model Colis {
  id              Int       @id @default(autoincrement())
  usernameSend    String
  usernamRecive   String
  phoneRecive     Int
  description     String
  poids           Float?
  prix            Float
  imageColis      String?
  adresseDepart   String
  adresseArrivee  String
  status          ColisStatus @default(EN_ATTENTE)
  user            User      @relation(fields: [userId], references: [id])
  userId          Int
  livraison       Livraison[]
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  livreur       Livreur?        @relation(fields: [livreurId], references: [id])
  livreurId     Int? 
}

model Article {
  id           Int         @id @default(autoincrement())
  titre        String
  content      String?
  user         User?       @relation(fields: [userId], references: [id])
  userId       Int?
  restaurant   Restaurant? @relation(fields: [restaurantId], references: [id])
  restaurantId Int?
  plat         Plats?      @relation(fields: [platsId], references: [id])
  platsId      Int?
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt

  Menusrapide Menusrapide[]
}

model Livraison {
  id              Int      @id @default(autoincrement())
  status          LivraisonStatus @default(ASSIGNEE)
  heureLivraison       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  livreurId       Int
  livreur         Livreur  @relation(fields: [livreurId], references: [id])
  user            User    @relation(fields: [userId], references: [id])
  userId          Int
  commandeId       Int? 
  commande         Commande?  @relation(fields: [commandeId], references: [id])
  colisId          Int?
  colis            Colis?   @relation(fields: [colisId], references: [id])
  historiquePositions HistoriquePosition[]
  serviceLivraison ServiceLivraison[]
}

model Livreur {
  id              Int      @id @default(autoincrement())
  username        String
  prenom          String
  email           String   @unique
  telephone       String   @unique
  password        String
  image           String?
  disponible      Boolean  @default(true)
  note            Float?   @default(5.0)
  totalLivraisons Int      @default(0)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  positionActuelle Json?
  pushToken        String?
  deviceId        String?
  livraisons      Livraison[]
  typeVehicule    TypeVehicule @default(MOTO)
  plaqueVehicule  String?
  NotificationHistory NotificationHistory[]
  HistoriquePosition HistoriquePosition[]
  commande       Commande[]
  Colis         Colis[]

  GasOrder GasOrder[]
}

model HistoriquePosition {
  id            Int      @id @default(autoincrement())
  latitude      Float
  longitude     Float
  timestamp     DateTime @default(now())
  
  // Relations
  livraisonId   Int
  livraison     Livraison @relation(fields: [livraisonId], references: [id])
  
  livreurId     Int
  livreur       Livreur   @relation(fields: [livreurId], references: [id])
}

model Note {
  id        Int       @id @default(autoincrement())
  notation  Notation  @default(ZERO)
  user      User?     @relation(fields: [userId], references: [id])
  userId    Int?
  plat      Plats?    @relation(fields: [platsId], references: [id])
  platsId   Int?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  Menusrapide Menusrapide[]
}

model Reservation {
  id               Int         @id @default(autoincrement())
  numero_table     String?
  nombre_personne  Int
  prix_reservation Float
  user             User?       @relation(fields: [userId], references: [id])
  userId           Int?
  restaurant       Restaurant? @relation(fields: [restaurantId], references: [id])
  restaurantId     Int?
  createdAt        DateTime    @default(now())
  updatedAt        DateTime    @updatedAt
}

model Payement {
  id                Int           @id @default(autoincrement())
  amount            Float
  mode_payement     Mode_payement
  currency          String
  status            PaymentStatus @default(EN_ATTENTE)
  reference         String
  phone             String
  email             String?
  authorization_url String?
  user              User?         @relation(fields: [userId], references: [id])
  userId            Int?
  commande          Commande      @relation(fields: [commandeId], references: [id])
  commandeId        Int           @unique
  createdAt         DateTime      @default(now())
  updatedAt         DateTime      @updatedAt
}

model Slide {
  id        Int      @id @default(autoincrement())
  name      String
  image     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Geolocalisation {
  id        Int       @id @default(autoincrement())
  longitude Float
  latitude  Float
  admin     Admin?    @relation(fields: [adminId], references: [id])
  adminId   Int?      @unique
  users     User[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model Historique {
  id        Int      @id @default(autoincrement())
  statut    String
  user      User?    @relation(fields: [userId], references: [id])
  userId    Int?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model NotificationHistory {
  id          Int      @id @default(autoincrement())
  titre       String
  message     String
  type        String   // 'COMMANDE', 'LIVRAISON', 'TRACKING'
  lu          Boolean  @default(false)
  createdAt   DateTime @default(now())
  
  // Relations
  userId      Int?
  user        User?    @relation(fields: [userId], references: [id])
  
  livreurId   Int?
  livreur     Livreur? @relation(fields: [livreurId], references: [id])
}

model Notifications {
  id          Int         @id @default(autoincrement())
  name        String
  description String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model ServiceLivraison {
  id          Int         @id @default(autoincrement())
  name        String
  description String
  frais       Float
  livraisons  Livraison[]
}

model FavoritePlats {
  id     Int     @id @default(autoincrement())
  user   User?   @relation(fields: [userId], references: [id])
  userId Int?
  plats  Plats[]

  Menusrapide Menusrapide[]
}
 
model PrixLivraisonColis {
  id            Int     @id @default(autoincrement())
  montant       Float
  description   String
  status        Int     @default(1) 
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

model PrixLivraisonCommande {
  id            Int     @id @default(autoincrement())
  montant       Float
  description   String
  status        Int     @default(1)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}
model PrixLivraisonGaz {
  id            Int     @id @default(autoincrement())
  montant       Float
  description   String
  status        Int     @default(1)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

// ========================================
// 🔥 NOUVEAUX MODÈLES POUR LE SYSTÈME DE GAZ
// ========================================

// Modèle pour les vendeurs de gaz
model GasVendor {
  id              Int      @id @default(autoincrement())
  name            String   // Ex: "Gaz Express Akwa"
  location        String   // Ex: "Akwa", "Bonanjo", "Deido"
  address         String   // Adresse complète
  latitude        Float    // Latitude GPS
  longitude       Float    // Longitude GPS
  deliveryPrice   Float    // Prix de livraison en FCFA
  deliveryTime    String   // Ex: "30-45 min"
  heuresOuverture HeuresOuverture[]
  availableBrands String[] // Ex: ["CAM_GAZ", "TRADEX", "BOCCOM", "SCTM"]
  isActive        Boolean  @default(true)
  description     String?  // Description du vendeur
  image           String?  // URL de l'image/logo
  rating          Float?   @default(5.0) // Note moyenne
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  gasOrders       GasOrder[]
  reviews         GasVendorReview[]
  admin           Admin?            @relation(fields: [adminId], references: [id])
  adminId         Int?
  ville           Ville?            @relation(fields: [villeId], references: [id])
  villeId         Int?
  @@map("gas_vendors")
  @@index([latitude, longitude]) // Index géospatial
  @@index([location, isActive])  // Index par lieu
}

// Modèle pour les commandes de gaz
model GasOrder {
  id                   Int            @id @default(autoincrement())
  orderNumber          String         @unique @default(cuid()) // Numéro de commande unique
  user                 User           @relation("UserGasOrders", fields: [userId], references: [id])
  userId               Int
  vendor               GasVendor      @relation(fields: [vendorId], references: [id])
  vendorId             Int
  phone                String         // Téléphone du client
  deliveryAddress      String         // Adresse de livraison complète
  selectedBrand        GasBrand       // Marque de gaz sélectionnée
  hasRegulator         RegulatorOption // Avec ou sans détendeur
  orderType            GasOrderType   // Type de commande (recharge/bouteille)
  quantity             Int            @default(1) // Quantité commandée
  basePrice            Float          // Prix unitaire de base
  subtotal             Float          // Sous-total (basePrice * quantity)
  deliveryPrice        Float          // Frais de livraison
  totalPrice           Float          // Prix total final
  position             String?        // Position GPS du client (optionnel)
  status               GasOrderStatus @default(EN_ATTENTE)
  paymentStatus        GasPaymentStatus  @default(GAS_PAYMENT_PENDING)
  paymentMethod        GasPaymentMethod  @default(CASH_ON_DELIVERY)
  specialInstructions  String?        // Instructions spéciales du client
  vendorNotes          String?        // Notes du vendeur
  deliveryNotes        String?        // Notes de livraison
  estimatedDeliveryTime String?       // Temps estimé
  actualDeliveryTime    String?       // Temps réel
  livreur       Livreur?        @relation(fields: [livreurId], references: [id])
  livreurId     Int?
  createdAt            DateTime       @default(now())
  updatedAt            DateTime       @updatedAt
  confirmedAt          DateTime?      // Date de confirmation
  preparedAt           DateTime?      // Date de préparation
  dispatchedAt         DateTime?      // Date d'expédition
  deliveredAt          DateTime?      // Date de livraison
  cancelledAt          DateTime?      // Date d'annulation
  cancellationReason   String?        // Raison si annulée
  review               GasOrderReview?
  @@map("gas_orders")
  @@index([userId, createdAt])       // Index pour historique utilisateur
  @@index([livreurId, createdAt])    // Index pour historique livreur
  @@index([vendorId, status])        // Index pour vendeur
  @@index([status, createdAt])       // Index par statut
  @@index([orderNumber])             // Index numéro de commande
}

// Modèle pour les avis sur les vendeurs
model GasVendorReview {
  id          Int       @id @default(autoincrement())
  user        User      @relation("UserGasVendorReviews", fields: [userId], references: [id])
  userId      Int
  vendor      GasVendor @relation(fields: [vendorId], references: [id])
  vendorId    Int
  rating      Float     // Note de 1 à 5
  comment     String?   // Commentaire
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  @@map("gas_vendor_reviews")
  @@unique([userId, vendorId]) // Un avis par utilisateur par vendeur
}

// Modèle pour les avis sur les commandes
model GasOrderReview {
  id          Int      @id @default(autoincrement())
  user        User     @relation("UserGasOrderReviews", fields: [userId], references: [id])
  userId      Int
  order       GasOrder @relation(fields: [orderId], references: [id])
  orderId     Int      @unique
  serviceRating     Float   // Note du service (1-5)
  qualityRating     Float   // Note de la qualité (1-5)
  deliveryRating    Float   // Note de la livraison (1-5)
  overallRating     Float   // Note globale (1-5)
  comment           String? // Commentaire
  wouldRecommend    Boolean @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  @@map("gas_order_reviews")
}


enum CommandeStatus {
  EN_ATTENTE
  VALIDER
  ASSIGNEE      
  EN_COURS      
  LIVREE
  ANNULEE
}

enum ColisStatus {
  EN_ATTENTE
  VALIDER
  ASSIGNEE      
  EN_COURS      
  LIVREE
  ANNULEE
}

enum LivraisonStatus {
  ASSIGNEE      // Livreur assigné, en route vers restaurant
  EN_ROUTE      // En route vers le client
  LIVREE        // Livraison terminée
  ANNULEE       // Livraison annulée
}

enum TypeVehicule {
  MOTO
  VELO
  VOITURE
  SCOOTER
} 

enum Statut {
  LIVREE
  ANNULEE
  NON_LIVRE
}

enum Notation {
  ZERO
  UN
  DEUX
  TROIS
  QUATRE
  CINQ
}

enum Mode_payement {
  MOBILE_MONEY
  CARTE_BANCAIRE
  A_LA_LIVRAISON
}

enum PaymentStatus {
  EN_ATTENTE
  COMPLETE
  ECHOUE
  REMBOURSE
}

// ========================================
// 🔥 NOUVEAUX ENUMS POUR LE SYSTÈME DE GAZ
// ========================================

// Marques de gaz disponibles au Cameroun
enum GasBrand {
  CAM_GAZ     // Cam Gaz
  TRADEX      // Tradex
  BOCCOM      // Boccom
  SCTM        // SCTM
  TOTAL_GAS   // Total Gas
  SHELL_GAS   // Shell Gas
  
  @@map("gas_brands")
}

// Options pour le détendeur/régulateur
enum RegulatorOption {
  WITH        // Avec saucle (détendeur)
  WITHOUT     // Sans saucle
  
  @@map("regulator_options")
}

// Types de commande de gaz
enum GasOrderType {
  REFILL       // Recharge seulement
  FULL_BOTTLE  // Bouteille pleine avec gaz
  
  @@map("gas_order_types")
}

// Statuts des commandes de gaz (préfixés pour éviter les conflits)
enum GasOrderStatus {
  EN_ATTENTE
  VALIDER
  ASSIGNEE      
  EN_COURS      
  LIVREE
  ANNULEE
  REMBOURSE
  @@map("gas_order_statuses")
}

// Statuts de paiement pour le gaz (préfixés pour éviter les conflits)
enum GasPaymentStatus {
  GAS_PAYMENT_PENDING    // En attente
  GAS_PAYMENT_PAID       // Payé
  GAS_PAYMENT_FAILED     // Échec
  GAS_PAYMENT_REFUNDED   // Remboursé
  
  @@map("gas_payment_statuses")
}

// Méthodes de paiement pour le gaz
enum GasPaymentMethod {
  CASH_ON_DELIVERY  // Paiement à la livraison
  MOBILE_MONEY      // Mobile Money
  BANK_TRANSFER     // Virement bancaire
  CARD              // Carte bancaire
  
  @@map("gas_payment_methods")
}