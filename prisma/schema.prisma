// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Admin {
  id               Int              @id @default(autoincrement())
  username         String
  email            String           @unique
  password         String
  phone            String           @unique
  image            String?
  user_role        User_role[]
  restaurant       Restaurant[]
  createdAt        DateTime?        @default(now())
  updateAt         DateTime?        @updatedAt
  geolocalisations Geolocalisation?
}

model User_role {
  Admin   Admin? @relation(fields: [adminId], references: [id])
  adminId Int
  Role    Role?  @relation(fields: [roleId], references: [id])
  roleId  Int

  @@id([adminId, roleId])
}

model Role {
  id        Int         @id @default(autoincrement())
  name      String
  user_role User_role[]
}

model User {
  id                Int              @id @default(autoincrement())
  username          String
  phone             String           @unique
  image             String?
  commande          Commande[]
  historique        Historique[]
  reservation       Reservation[]
  note              Note[]
  favoritePlats     FavoritePlats[]
  createdAt         DateTime?        @default(now())
  updateAt          DateTime?        @updatedAt
  article           Article[]
  payement          Payement[]
  otp               OTP?
  Geolocalisation   Geolocalisation? @relation(fields: [geolocalisationId], references: [id])
  geolocalisationId Int?
}

model OTP {
  id              Int      @id @default(autoincrement())
  phone           String
  code            Int?
  verificationSid String // Ajout du SID de vérification de Twilio
  status          String // Ajout du statut de la vérification
  createdAt       DateTime @default(now())
  expiredAt       DateTime @default(dbgenerated("CURRENT_TIMESTAMP + interval '5 minute'"))
  user            User     @relation(fields: [userId], references: [id])
  userId          Int

  @@unique([userId])
}

model Restaurant {
  id              Int               @id @default(autoincrement())
  name            String
  phone           String?
  adresse         String
  image           String
  description     String
  ratings         Float             @default(0)
  createdAt       DateTime?         @default(now())
  updateAt        DateTime?         @updatedAt
  latitude        Float
  longitude       Float
  menus           Menu[]
  article         Article[]
  reservation     Reservation[]
  heuresOuverture HeuresOuverture[]
  Admin           Admin?            @relation(fields: [adminId], references: [id])
  adminId         Int?
  Ville           Ville?            @relation(fields: [villeId], references: [id])
  villeId         Int?
}

model HeuresOuverture {
  id           Int         @id @default(autoincrement())
  jour         String
  heures       String
  restaurant   Restaurant? @relation(fields: [restaurantId], references: [id])
  restaurantId Int?
}

model Ville {
  id         Int          @id @default(autoincrement())
  name       String
  longitude  Float?
  latitude   Float?
  restaurant Restaurant[]
}

model Menu {
  id           Int         @id @default(autoincrement())
  name         String
  restaurant   Restaurant  @relation(fields: [restaurantId], references: [id])
  restaurantId Int
  categories   Categorie[]
  createdAt    DateTime?   @default(now())
  updateAt     DateTime?   @updatedAt
}

model Categorie {
  id          Int       @id @default(autoincrement())
  name        String
  image       String
  plats       Plats[]
  description String?
  menu        Menu?     @relation(fields: [menuId], references: [id])
  menuId      Int?
  createdAt   DateTime? @default(now())
  updateAt    DateTime? @updatedAt
}

model Plats {
  id            Int             @id @default(autoincrement())
  name          String
  image         String
  description   String?
  prix          Float
  quantity      Int             @default(1)
  ratings       Float           @default(0)
  createdAt     DateTime?       @default(now())
  updateAt      DateTime?       @updatedAt
  article       Article[]
  note          Note[]
  Categorie     Categorie?      @relation(fields: [categorieId], references: [id])
  categorieId   Int?
  commande      Commande[]
  favoritePlats FavoritePlats[]
}

model Commande {
  id             Int        @id @default(autoincrement())
  quantity       Int
  prix           Float
  recommandation String?
  position       String
  User           User?      @relation(fields: [userId], references: [id])
  userId         Int?
  createdAt      DateTime?  @default(now())
  updateAt       DateTime?  @updatedAt
  Plats          Plats?     @relation(fields: [platsId], references: [id])
  platsId        Int?
  Livraison      Livraison? @relation(fields: [livraisonId], references: [id])
  livraisonId    Int?
  Payement       Payement[]
}

model Article {
  id           Int         @id @default(autoincrement())
  titre        String
  content      String?
  createdAt    DateTime?   @default(now())
  updateAt     DateTime?   @updatedAt
  User         User?       @relation(fields: [userId], references: [id])
  userId       Int?
  Restaurant   Restaurant? @relation(fields: [restaurantId], references: [id])
  restaurantId Int?
  Plats        Plats?      @relation(fields: [platsId], references: [id])
  platsId      Int?
}

model Livraison {
  id                 Int               @id @default(autoincrement())
  statut             Statut            @default(NON_LIVRE)
  adresse            String
  dateLivraison      DateTime?         @default(now())
  updateAt           DateTime?         @updatedAt
  commande           Commande[]
  ServiceLivraison   ServiceLivraison? @relation(fields: [serviceLivraisonId], references: [id])
  serviceLivraisonId Int?
}

enum Statut {
  LIVREE
  ANNULEE
  NON_LIVRE
}

model Note {
  id       Int       @id @default(autoincrement())
  notation Notation  @default(ZERO)
  createdAt DateTime? @default(now())
  updateAt DateTime? @updatedAt
  User     User?     @relation(fields: [userId], references: [id])
  userId   Int?
  Plats    Plats?    @relation(fields: [platsId], references: [id])
  platsId  Int?
}

enum Notation {
  ZERO
  UN
  DEUX
  TROIS
  QUATRE
  CINQ
}

model Reservation {
  id               Int         @id @default(autoincrement())
  numero_table     String?
  nombre_personne  Int
  prix_reservation Float
  createdAt        DateTime?   @default(now())
  updateAt         DateTime?   @updatedAt
  User             User?       @relation(fields: [userId], references: [id])
  userId           Int?
  Restaurant       Restaurant? @relation(fields: [restaurantId], references: [id])
  restaurantId     Int?
}

model Payement {
  id                Int      @id @default(autoincrement())
  amount            Int
  mode_payement     String
  currency          String
  status            String
  reference         String
  phone             String
  email             String?
  authorization_url String
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  User              User?    @relation(fields: [userId], references: [id])
  userId            Int?
  commandeId        Int
  Commande          Commande @relation(fields: [commandeId], references: [id])
}

enum Mode_payement {
  MOBILE_MONEY
  CARTE_BANCAIRE
}

model slide {
  id       Int       @id @default(autoincrement())
  name     String
  image    String
  createdAt DateTime? @default(now())
  updateAt DateTime? @updatedAt
}

model Geolocalisation {
  id        Int       @id @default(autoincrement())
  longitude Float
  latitude  Float
  createdAt DateTime? @default(now())
  updateAt  DateTime? @updatedAt
  Admin     Admin?    @relation(fields: [adminId], references: [id])
  adminId   Int?      @unique
  User      User[]
}

model Historique {
  id       Int       @id @default(autoincrement())
  statut   String
  createdAt DateTime? @default(now())
  updateAt DateTime? @default(now())
  User     User?     @relation(fields: [userId], references: [id])
  userId   Int?
}

model ServiceLivraison {
  id          Int         @id @default(autoincrement())
  name        String
  description String
  frais       Float
  livraison   Livraison[]
}

model FavoritePlats {
  id     Int     @id @default(autoincrement())
  User   User?   @relation(fields: [userId], references: [id])
  userId Int?
  plats  Plats[]
}
