// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Admin {
  id               Int               @id @default(autoincrement())
  username         String
  email            String            @unique
  password         String
  phone            String            @unique
  image            String?
  commande         Commande[]
  User_role        User_role[]
  livraison        Livraison[]
  restaurant       Restaurant[]
  historique       Historique[]
  createdAt        DateTime?         @default(now())
  updateAt         DateTime?         @updatedAt
  geolocalisations Geolocalisation[]
}

model User_role {
  Admin   Admin? @relation(fields: [adminId], references: [id])
  adminId Int
  Role    Role?  @relation(fields: [roleId], references: [id])
  roleId  Int

  @@id([adminId, roleId])
}

model Role {
  id        Int         @id @default(autoincrement())
  name      String
  user_role User_role[]
}

model User {
  id               Int               @id @default(autoincrement())
  username         String
  phone            String            @unique
  image            String?
  commande         Commande[]
  historique       Historique[]
  reservation      Reservation[]
  note             Note[]
  geolocalisations Geolocalisation[]
  favoritePlats    FavoritePlats[]
  createdAt        DateTime?         @default(now())
  updateAt         DateTime?         @updatedAt
  Article          Article[]
  Payement         Payement[]
}

model Categorie {
  id              Int            @id @default(autoincrement())
  name_categorie  Name_categorie @default(Camerounaise)
  image_categorie String
  plats           Plats[]
  description     String?
  createdAt       DateTime?      @default(now())
  updateAt        DateTime?      @updatedAt
}

enum Name_categorie {
  Camerounaise
  Senegalaise
  Americaine
  Marocaine
  Ivoiriene
  Maliene
  Francaise
}

model Restaurant {
  id                 Int               @id @default(autoincrement())
  nom_restaurant     String
  ville              Ville             @default(DOUALA)
  phone_restaurant   String?
  menssion           MensionRestaurant @default(NOM_FAVORITE)
  Adresse_restaurant String
  image_restaurant   String
  createdAt          DateTime?         @default(now())
  updateAt           DateTime?         @updatedAt
  Plats               Plats[]
  Article            Article[]
  Reservation        Reservation[]
  Admin              Admin?            @relation(fields: [adminId], references: [id])
  adminId            Int?
}

enum Ville {
  DOUALA
  YAOUNDE
  KRIBI
  BAFOUSSAM
  BUA
}

enum MensionRestaurant {
  FAVORITE
  PROCHE
  NOM_FAVORITE
}

// model Menu {
//   id           Int         @id @default(autoincrement())
//   nom_menu     String
//   image_menu   String 
//   categorie    Categorie[]
//   createdAt    DateTime?   @default(now())
//   updateAt     DateTime?   @updatedAt
//   Restaurant   Restaurant? @relation(fields: [restaurantId], references: [id])
//   restaurantId Int?
// }

model Plats {
  id               Int            @id @default(autoincrement())
  nom_plat         String
  image_plat       String
  description_plat String?
  prix_plat        Float
  quantity         Int            @default(1)
  menssionPLat     MensionPlat?   @default(FAVORITE)
  createdAt        DateTime?      @default(now())
  updateAt         DateTime?      @updatedAt
  Article          Article[]
  note             Note[]
  favoritePlats    FavoritePlats? @relation(fields: [favoritePlatsId], references: [id])
  favoritePlatsId  Int?
  Restaurant       Restaurant?    @relation(fields: [restaurantId], references: [id])
  restaurantId     Int?
  PlatCommande     PlatCommande[]
  Categorie        Categorie?     @relation(fields: [categorieId], references: [id])
  categorieId      Int?
}

enum MensionPlat {
  FAVORITE
  NON_FAVORITE
}

model Commande {
  id                 Int               @id @default(autoincrement())
  statut_commende    Statut_commande   @default(EN_ATTENTE)
  User               User?             @relation(fields: [userId], references: [id])
  userId             Int?
  createdAt          DateTime?         @default(now())
  updateAt           DateTime?         @updatedAt
  platCommande       PlatCommande[]
  Historique         Historique?       @relation(fields: [historiqueId], references: [id])
  historiqueId       Int?
  ServiceLivraison   ServiceLivraison? @relation(fields: [serviceLivraisonId], references: [id])
  serviceLivraisonId Int?
  Admin              Admin?            @relation(fields: [adminId], references: [id])
  adminId            Int?
  Livraison          Livraison?        @relation(fields: [livraisonId], references: [id])
  livraisonId        Int?
  Payement           Payement?         @relation(fields: [payementId], references: [id])
  payementId         Int?
}

enum Statut_commande {
  EN_ATTENTE
  EN_COURS_DE_LIVRAISON
  LIVREE
}

model PlatCommande {
  id         Int      @id @default(autoincrement())
  plats      Plats    @relation(fields: [platId], references: [id])
  platId     Int
  commande   Commande @relation(fields: [commandeId], references: [id])
  commandeId Int
  quantity   Int
}

model Article {
  id           Int         @id @default(autoincrement())
  title        String
  content      String?
  reatedAt     DateTime?   @default(now())
  updateAt     DateTime?   @updatedAt
  User         User?       @relation(fields: [userId], references: [id])
  userId       Int?
  Restaurant   Restaurant? @relation(fields: [restaurantId], references: [id])
  restaurantId Int?
  Plats        Plats?      @relation(fields: [platsId], references: [id])
  platsId      Int?
}

model Livraison {
  id               Int              @id @default(autoincrement())
  statut_livraison Statut_livraison @default(LIVREE)
  reatedAt         DateTime?        @default(now())
  updateAt         DateTime?        @updatedAt
  Commande         Commande[]
  Admin            Admin?           @relation(fields: [adminId], references: [id])
  adminId          Int?
}

enum Statut_livraison {
  LIVREE
  ANNULEE
}

model Note {
  id       Int       @id @default(autoincrement())
  notation Notation  @default(ZERO)
  reatedAt DateTime? @default(now())
  updateAt DateTime? @updatedAt
  User     User?     @relation(fields: [userId], references: [id])
  userId   Int?
  Plats    Plats?    @relation(fields: [platsId], references: [id])
  platsId  Int?
}

enum Notation {
  ZERO
  UN
  DEUX
  TROIS
  QUATRE
  CINQ
}

model Reservation {
  id               Int              @id @default(autoincrement())
  numero_table     String?
  nombre_personne  Int
  prix_reservation Prix_reservation @default(MILLE_FRANCS)
  reatedAt         DateTime?        @default(now())
  updateAt         DateTime?        @updatedAt
  User             User?            @relation(fields: [userId], references: [id])
  userId           Int?
  Restaurant       Restaurant?      @relation(fields: [restaurantId], references: [id])
  restaurantId     Int?
}

enum Prix_reservation {
  MILLE_FRANCS
  Deux_MILLE_FRANCS
  TROIS_MILLE_FRANCS
}

model Payement {
  id            Int           @id @default(autoincrement())
  montant       Int
  mode_payement Mode_payement @default(MOBILE_MONEY)
  paymentDate   DateTime?     @default(now())
  updateAt      DateTime?     @updatedAt
  User          User?         @relation(fields: [userId], references: [id])
  userId        Int?
  Commande      Commande[]
}

enum Mode_payement {
  MOBILE_MONEY
  CARTE_BANCAIRE
}

model slide {
  id          Int       @id @default(autoincrement())
  name_slide  String
  image_slide String
  reatedAt    DateTime? @default(now())
  updateAt    DateTime? @updatedAt
}

model Geolocalisation {
  id                  Int       @id @default(autoincrement())
  user                User?     @relation(fields: [userId], references: [id])
  userId              Int?
  longitude           Float
  latitude            Float
  reatedAt            DateTime? @default(now())
  updateAt            DateTime? @updatedAt
  Admin               Admin?    @relation(fields: [adminId], references: [id])
  adminId             Int?
}

model Historique {
  id                Int        @id @default(autoincrement())
  statut_historique String
  reatedAt          DateTime?  @default(now())
  updateAt          DateTime?  @updatedAt
  Commande          Commande[]
  Admin             Admin[]
  User              User?      @relation(fields: [userId], references: [id])
  userId            Int?
}

model ServiceLivraison {
  id       Int        @id @default(autoincrement())
  name     String
  Commande Commande[]
}

model FavoritePlats {
  id     Int     @id @default(autoincrement())
  User   User?   @relation(fields: [userId], references: [id])
  userId Int?
  Plats  Plats[]
}
